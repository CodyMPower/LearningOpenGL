Textures:
	Images used to add extra detail to objects
	Textures can be used to hold generic data, but that is more advanced
	Usually 2D, but 1D and 3D textures are possible
	points on textures are called "texels" (apparently)
	Texels are defined between 0 and 1 for their coordinates

	Map texels to vertices
	Interpolation between each fragment will calculate appropriate texels inbetween assigned texels'

Texture Objects:
	Works like VAO/VBOs
	glGenTexture(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);

	3 other types of texture:
	GL_TEXTURE_1D
	GL_TEXTURE_3D
	GL_TEXTURE_CubeMap, deal with this one for skybox

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
	GLTEXTURE_2D:		Texture Target (what the texture is bound to)
	0:					Mipmap level
	GL_RGB:				Format of data being stored, RGB or RGBA
	width:				width of the texture
	height:				height of the texture
	0:					Should always be 0, legacy for handling texture borders
	GL_RGB:				Format of the data being loaded
	GL_UNSIGNED_BYTE:	Data type of the values
	data:				The data it's self

Mipmaps:
	Resolution limitations for textures
	More resolution for closer objects and less resolution for further objects
	can generate mipmaps

Filters:
	Rendering off center
	Could use nearest texel or
	Could use a weighted average of surrounding texels (blended boundaries)
	Liniar is more common
	Use nearest for pixelated appearence

	glTextParameter: used to set texture parameters
	glTextParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);	// Min filter is applied for when texture is made smaller
	glTextParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);	// Mag filter is applied for when texture is made larger

	GL_NEAREST for nearest filter
	GL_LINEAR for linear filter, works better on more complex textures

Wrap:
	Applying texture on an infinite plane, or outside the edges of the texture
	You could:
	Repeat texture
	repeat mirrored texture
	extend texels at the edge
	color border

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	// Specifies how to handle wrap in what direction

	GL_TEXTURE_WRAP_S for wrapping on "s-axis" (x axis in texture coordinates)
	GL_TEXTURE_WRAP_T for wrapping on "t-axis" (y axis in texture coordinates)

	GL_REPEAT
	GL_MIRRORED_REPEAT
	GL_CLAMP_TO_EDGE
	GL_CLAMP_TO_BORDER	Applys coloured border

Loading images for textures
	Could write own image loaderbut can get confusing since there are so many loaders
	Image loader libraries to do the work for us
	Simple OpenGL Image Library (SOIL) is common
	using stb_image

Using stb_image:
	only requires header file
	must start project with:

	#define STB_IMAGE_IMPLEMENTATION
	unsigned char *data = stbi_loader("image.jpg", &width, &height, &bitDepth, 0);

	Might need to flip image

	stbi_set_flip_vertically_on_load(true);

Texture Samplers:
	Textures are accessed via samplers
	Textures are attatched to a "Texture Unit"
	Samplers access textures via the texture unit
	Use "sampler2D" type in the shader
	use GLSL "texture" function to get the value of the texel
	texture(textureSampler, TexCoord);

	Bind texture to desired Texture Unit:
		glActivateTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, textureID);

	Ensure sampler2D variables know which Texture Unit to access:
		glUniform1i(uniformTextureSampler, 0);

	Values attatched to uniform is the Texture Unit number, basically the ID of the texture
